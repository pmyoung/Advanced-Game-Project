using System;
using System.Collections.Generic;
using System.Text;

//SERVERSIDE
//Contains information relating to all game objects (Ships, bullets, planets, etc). 
//This class is not used alone; It is exteneded by other game objects.

namespace Server
{
    abstract class GameObject
    {
        public float x;
        public float y;
        public float angle;
        public int radius;
        public int mass;
        public int spriteID;
        public int colorID;
        public int id;
        
        static int nextId = 2;

        public float speedX;
        public float speedY;

        public GameObject()
        {
            id = nextId;
            nextId++;
        }

        public virtual void updatePosition()
        {
            x += speedX;
            y += speedY;
        }

        //Checks if two objects have collided, returning true if they have or false if they haven't
        //Collision detection is based upon the radius of the objects and the distance between them
        public virtual bool checkCollision(GameObject object2)
        {
            if (this == object2) return false;
            float distance = (float)(Math.Sqrt(Math.Pow((this.x - object2.x), 2) + Math.Pow(this.y - object2.y, 2)));
            if (distance < this.radius + object2.radius) return true;
            return false;
        }

        public abstract void treatCollision(GameObject object2);


        public virtual void outOfBounds()
        //If an object moves out of the world boundary, switch it's direction of motion.
        //Bullets should be an exception to this rule (Override function?) 
        //as they should be destroyed when reaching the edge of the world
        {
            if (x < 0)
            {
                this.speedX = this.speedX * (-1);
                this.x = 0;
            }
            else if (x > MatchConfig.mapWidth)
            {
                this.speedX = this.speedX * (-1);
                this.x = MatchConfig.mapWidth;
            }
            //if ((x < MatchConfig.windowBoundaryXmin && speedX < 0) || (x > MatchConfig.windowBoundaryXmax && speedX > 0))
            //if ((x < 0 && speedX < 0) || (x > MatchConfig.map.mapWidth && speedX > 0))
            //{                
            //    this.speedX = this.speedX * (-1);
            //}

            if (y < 0)
            {
                this.speedY = this.speedY * (-1);
                this.y = 0;
            }
            else if (y > MatchConfig.mapHeight)
            {
                this.speedY = this.speedY * (-1);
                this.y = MatchConfig.mapHeight;
            }

            //if ((y < MatchConfig.windowBoundaryYmin && speedY < 0) || (y > MatchConfig.windowBoundaryYmax && speedY > 0))
            //if ((y < 0 && speedY < 0) || (y > MatchConfig.map.mapHeigth && speedY > 0))
            //{
            //    this.speedY = this.speedY * (-1);
            //}
        }

        //Modify acceleration rates of game objects based on gravity effect
        //public virtual void calculateGravity()
        //{
        //    //List<GameObject> objectsG =  MatchConfig.getGravityObjects();
        //    float G = MatchConfig.gravityConstant;

        //    foreach (GameObject ob in objectsG)
        //    {
        //        if(!ob.Equals(this))
        //        {
        //            double distance = Math.Sqrt((Math.Pow(this.x - ob.x, 2) + Math.Pow(this.y - ob.y, 2)));
        //            double speedVector = (float)((G * ob.mass) / Math.Pow(distance, 2));
        //            double deltaY = (this.y - ob.y);
        //            double deltaX = (this.x - ob.x);
        //            double angleDegree = Math.Atan(deltaY / deltaX);// * 180 / Math.PI;
        //            //float rad = (float)(Math.PI / 180) * o.angle;
        //            if (this.x != ob.x)
        //            {
        //                //speedX += (float)(Math.Cos(angleDegree) * speedVector);
        //                if (this.x > ob.x)
        //                    speedX -= (float)Math.Abs((Math.Cos(angleDegree) * speedVector));
        //                else
        //                    speedX += (float)Math.Abs((Math.Cos(angleDegree) * speedVector));
        //            }
        //            if (this.y != ob.y)
        //            {
        //                //speedY += (float)(Math.Sin(angleDegree) * speedVector);
        //                if (this.y < ob.y)
        //                    speedY += (float)Math.Abs((Math.Sin(angleDegree) * speedVector));
        //                else
        //                    speedY -= (float)Math.Abs((Math.Sin(angleDegree) * speedVector));
        //            }
        //        }

                
        //    }
        //}
    }
}
